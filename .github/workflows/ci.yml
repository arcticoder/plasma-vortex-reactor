name: CI

on:
  push:
  pull_request:

jobs:
  test-and-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest ruff jsonschema
      - name: Run tests (fast)
        run: |
          . .venv/bin/activate
          pytest -q -m "not slow and not production"
      - name: Run tests (production)
        run: |
          . .venv/bin/activate
          pytest -q -m "production"
      - name: Demo run and artifacts
        run: |
          . .venv/bin/activate
          python scripts/demo_runner.py --scenario examples/scenario_min.json --steps 10 --dt 1e-3 --seed 123 --timeline-budget 50 --enforce-density --optimize-energy --hardware-simulation
          python scripts/generate_feasibility_report.py --gamma-series "$(cat datasets/gamma_series.json)" \
            --dt 0.002 --b-series "$(cat datasets/b_field_series.json)" --E-mag "$(cat datasets/E_mag.json)" \
            --out feasibility_gates_report.json --scenario-id ci-demo --fail-on-gate --yield-model physics --n-cm3 1e20 --Te-eV 10 --require-yield --require-fom
          python scripts/metrics_gate.py --metrics metrics.json --report feasibility_gates_report.json
          python scripts/param_sweep_confinement.py --out confinement_sweep.csv --plot-confinement-energy confinement_energy.png
          python scripts/uq_demo.py --samples 10 --seed 42 --out-json uq_results.json --out-csv uq_results.csv
          python scripts/analysis_fields_plot.py --out b_field_ripple.png
          python scripts/plot_stability.py --out stability.png
          python -c "import sys; sys.path.insert(0, 'src'); from reactor.analysis_stat import plot_stability_ripple; plot_stability_ripple([5e-5,1e-4,2e-4],[0.999,0.998,0.995],'stability_ripple.png')"
          python scripts/plot_fom.py --out fom_yield.png
          python scripts/plot_production_fom.py --fixed --out production_fom_yield.png
          python scripts/plot_yield_density.py --out yield_density.png
          python scripts/plot_hardware_metrics.py --out hardware_metrics.png
          python scripts/plot_hardware_metrics.py --high-load --out high_load_hardware_metrics.png
          python scripts/full_sweep.py --out full_sweep.csv
          python scripts/param_sweep_confinement.py --full-sweep-with-ripple
          python scripts/param_sweep_confinement.py --full-sweep-with-time
          python scripts/param_sweep_confinement.py --full-sweep-with-dynamic-ripple
          # Generate dynamic stability vs ripple plot from sweep (fallbacks to defaults if CSV missing)
          python scripts/plot_dynamic_stability_ripple.py --from-sweep full_sweep_with_dynamic_ripple.csv --out dynamic_stability_ripple.png
          python scripts/uq_optimize.py --samples 10 --seed 123 --out uq_optimized.json --production
          python scripts/run_report.py --feasibility feasibility_gates_report.json --timeline-summary timeline_summary.json --uq uq_optimized.json --integrated-out integrated_report.json
          python scripts/production_kpi.py --feasibility feasibility_gates_report.json --metrics metrics.json --uq uq_optimized.json --out production_kpi.json
          python scripts/calibrate_ripple_alpha.py --from-csv full_sweep_with_dynamic_ripple.csv --out calibration.json
          python scripts/time_to_stability_yield.py --sweep-time full_sweep_with_time.csv --out-json time_to_metrics.json --out-png time_to_metrics.png
          python scripts/generate_progress_dashboard.py --docs-dir docs --out progress_dashboard.html
          python scripts/sensor_noise_model.py --out sensor_noise.png --snr 20
          python scripts/bench_step_loop.py --steps 200 --dt 1e-4 --out bench_step_loop.json
          python scripts/cost_model_sweep.py --n 8
          python scripts/snr_propagation.py --snr 25
          python scripts/performance_budget.py --bench bench_step_loop.json --max-elapsed-s 2.0 --trend-out bench_trend.jsonl
          python scripts/validate_schemas.py > validation_report.json || true
      - name: Run energy reduction demo
        run: |
          . .venv/bin/activate
          python scripts/demo_runner.py --scenario examples/scenario_min.json --steps 5 --dt 1e-3 --seed 321
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            timeline.ndjson
            feasibility_gates_report.json
            confinement_sweep.csv
            confinement_energy.png
            b_field_ripple.png
            stability.png
            stability_ripple.png
            dynamic_stability_ripple.png
            fom_yield.png
            production_fom_yield.png
            yield_density.png
            hardware_metrics.png
            high_load_hardware_metrics.png
            energy_reduction.png
            full_sweep.csv
            full_sweep_with_ripple.csv
            full_sweep_with_time.csv
            full_sweep_with_dynamic_ripple.csv
            integrated_report.json
            production_kpi.json
            calibration.json
            time_to_metrics.json
            time_to_metrics.png
            progress_dashboard.html
            sensor_noise.png
            bench_step_loop.json
            bench_trend.jsonl
            progress_dashboard.json
            cost_sweep.json
            cost_sweep.csv
            cost_sweep.png
            snr_propagation.json
            snr_propagation.png
            validation_report.json

      - name: PR summary comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let kpi = {};
            try { kpi = JSON.parse(fs.readFileSync('production_kpi.json','utf8')); } catch {}
            const msg = `CI artifacts ready. KPI stable=${kpi.stable ?? 'n/a'}, FOM=${kpi.fom ?? 'n/a'}\n\nArtifacts: progress_dashboard.html, production_kpi.json, integrated_report.json, time_to_metrics.*`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: msg
            });
            uq_optimized.json
            uq_production.json
            uq_results.json
            uq_results.csv
  gated-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario:
          - examples/scenario_min.json
          - examples/scenario_high_ripple.json
          - examples/scenario_high_density.json
          - examples/scenario_low_temp.json
          - examples/scenario_edge.json
          - examples/scenario_high_load.json
          - examples/scenario_production.json
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
      - name: Run demo and feasibility with gate
        run: |
          . .venv/bin/activate
          STEPS=5
          if [ "${{ matrix.scenario }}" = "examples/scenario_high_load.json" ]; then STEPS=10000; fi
          python scripts/demo_runner.py --scenario ${{ matrix.scenario }} --steps $STEPS --dt 1e-3 --seed 7
          python scripts/generate_feasibility_report.py --gamma-series "$(cat datasets/gamma_series.json)" \
            --dt 0.002 --b-series "$(cat datasets/b_field_series.json)" --E-mag "$(cat datasets/E_mag.json)" \
            --out feasibility_gates_report.json --scenario-id ${{ matrix.scenario }} --fail-on-gate --yield-model physics --n-cm3 1e20 --Te-eV 10 --require-yield --require-fom || true
          # metrics_gate enforces failure for high_ripple scenario demonstrating gated failure
          python scripts/metrics_gate.py --metrics metrics.json --report feasibility_gates_report.json
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install ruff
        run: pip install ruff
      - name: Ruff check
        run: ruff check .
  types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install mypy and deps
        run: |
          pip install mypy
      - name: Run mypy
        run: mypy src/reactor scripts tests

  hardware-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          pip install pytest
      - name: Run hardware tests
        run: |
          . .venv/bin/activate
          pytest -q -m "hardware"

name: Build Paper PDF

on:
  workflow_dispatch:
  push:
    paths:
      - 'papers/**'
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/**'

jobs:
  build-pdf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Restore cached data/artifacts (fast-path)
        uses: actions/cache@v3
        with:
          path: |
            data
            artifacts
          key: ${{ runner.os }}-pv-data-${{ hashFiles('scripts/**','src/**','examples/**') }}
          restore-keys: |
            ${{ runner.os }}-pv-data-
      - name: Set up Python and plotting dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-plot.txt ]; then pip install -r requirements-plot.txt || true; fi
        shell: bash
      - name: Install minimal TeX packages (Ubuntu runners)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          # These apt packages provide a reasonable LaTeX baseline including etoolbox
          sudo apt-get update -y
          # include xetex so xelatex is available (latexmk may call xelatex)
          # also install latexmk so we can run latexmk directly and capture logs
          sudo apt-get install -y --no-install-recommends texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended texlive-xetex latexmk
        shell: bash
  - name: 'Debug: show installed LaTeX binaries'
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          echo "Which binaries are available and versions:"
          which xelatex || echo "xelatex: not found"
          xelatex --version || true
          which pdflatex || echo "pdflatex: not found"
          pdflatex --version || true
          which latexmk || echo "latexmk: not found"
          latexmk --version || true
          echo "List /usr/bin for latex/pdflatex/xetex:" && ls -l /usr/bin/*tex* || true
        shell: bash
      - name: Generate paper figures (best-effort)
        run: |
          set -euo pipefail
          mkdir -p artifacts data
          # Install any optional plotting extras (already done earlier, but safe)
          if [ -f requirements-plot.txt ]; then pip install -r requirements-plot.txt || true; fi
          # 1) Fast deterministic demo to generate timeline/feasibility artifacts used by run_report/production_kpi
          # Use a small number of steps so CI stays quick.
          python scripts/demo_runner.py --scenario examples/scenario_min.json --steps 5 --dt 1e-3 --seed 123 --timeline-budget 50 || true
          # 2) Produce sweep CSVs (dynamic ripple / time sweeps). May be slow depending on script defaults.
          if [ -f scripts/param_sweep_confinement.py ]; then
            python scripts/param_sweep_confinement.py --full-sweep-with-dynamic-ripple --full-sweep-with-time || true
          fi
          # 3) Compute time-to-stability metrics (reads data/full_sweep_with_time.csv if present)
          if [ -f scripts/time_to_stability_yield.py ]; then
            python scripts/time_to_stability_yield.py --sweep-time data/full_sweep_with_time.csv --out-json artifacts/time_to_metrics.json --out-png artifacts/time_to_metrics.png || true
          fi
          # 4) Produce operating envelope JSON/CSV (envelope sweep script or param sweep may provide this)
          if [ -f scripts/envelope_sweep.py ]; then
            python scripts/envelope_sweep.py --n-points 12 --out-json artifacts/operating_envelope.json --out-csv data/operating_envelope.csv --out-png artifacts/operating_envelope.png || true
          fi
          # 5) Run the integrator and KPI summary (best-effort). Inputs may be missing; non-fatal.
          if [ -f scripts/run_report.py ]; then
            python scripts/run_report.py --feasibility feasibility_gates_report.json --timeline-summary timeline_summary.json --uq uq_optimized.json --integrated-out artifacts/integrated_report.json || true
          fi
          if [ -f scripts/production_kpi.py ]; then
            python scripts/production_kpi.py --feasibility feasibility_gates_report.json --metrics metrics.json --uq uq_optimized.json --out production_kpi.json || true
          fi
          # 6) Finally run the plotters (they will create small placeholders if inputs are absent)
          python scripts/plot_dynamic_stability_ripple.py --from-sweep data/full_sweep_with_dynamic_ripple.csv --out artifacts/dynamic_stability_ripple.png || true
          python scripts/plot_kpi_trend.py --out artifacts/kpi_trend.png || true
          python scripts/plot_envelope_dual_panel.py --envelope artifacts/operating_envelope.json --time-metrics artifacts/time_to_metrics.json --out artifacts/envelope_dual_panel.png || true
          # 7) Detect known tiny-placeholder PNGs. Fail only if a required PNG is missing, empty, or exactly matches the canonical 1x1 placeholder.
          PLACEHOLDER_HEX="89504E470D0A1A0A0000000D49484452000000010000000108060000001F15C4890000000A49444154789C6360000002000100FFFF03000006000557BF0000000049454E44AE426082"
          echo "Checking generated figures for placeholders (will fail if exact tiny-placeholder is detected)"
          for f in artifacts/dynamic_stability_ripple.png artifacts/envelope_dual_panel.png artifacts/kpi_trend.png artifacts/operating_envelope.png artifacts/time_to_metrics.png; do
            if [ ! -f "$f" ]; then
              echo "Required figure missing: $f" >&2
              exit 2
            fi
            sz=$(stat -c%s "$f" || echo 0)
            echo "Found $f ($sz bytes)"
            if [ "$sz" -eq 0 ]; then
              echo "Figure $f is empty (0 bytes) — failing build" >&2
              exit 3
            fi
            fh=$(xxd -p -c 999999 "$f" | tr -d '\n' || true)
            if [ "$fh" = "$PLACEHOLDER_HEX" ]; then
              echo "Figure $f matches known tiny placeholder PNG — failing build" >&2
              echo "First 64 bytes of $f:" >&2
              xxd -l 64 "$f" >&2 || true
              exit 4
            fi
            echo "Preview (first 32 bytes hex) of $f: $(xxd -l 32 -p "$f" | tr -d '\n')"
          done
        shell: bash
      - name: Save generated data/artifacts to cache
        uses: actions/cache@v3
        with:
          path: |
            data
            artifacts
          key: ${{ runner.os }}-pv-data-${{ hashFiles('scripts/**','src/**','examples/**') }}
      - name: Build PDF with latexmk (choose engine)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          # Run latexmk directly so we get full stdout/stderr in the job log.
          # Prefer xelatex if available (some latexmk setups call xelatex by default),
          # otherwise fall back to pdflatex for a smaller texlive footprint.
          echo "Building LaTeX PDF for papers/phase3_stability.tex"
          cd papers
          if command -v xelatex >/dev/null 2>&1; then
            latexmk -pdf -pdflatex=pdflatex -xelatex -quiet -f -interaction=nonstopmode -silent -halt-on-error -use-make phase3_stability.tex
          else
            latexmk -pdf -pdflatex=pdflatex -quiet -f -interaction=nonstopmode -silent -halt-on-error -use-make phase3_stability.tex
          fi
        shell: bash
name: Build Paper PDF

  workflow_dispatch:
      - 'papers/**'
      - 'scripts/**'

jobs:
  build-pdf:
        uses: actions/cache@v3
          path: |
            data
            artifacts
          restore-keys: |
      - name: Set up Python and plotting dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
      - name: Install minimal TeX packages (Ubuntu runners)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          sudo apt-get update -y
          # include xetex so xelatex is available (latexmk may call xelatex)
          # also install latexmk so we can run latexmk directly and capture logs
          sudo apt-get install -y --no-install-recommends texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended texlive-xetex latexmk
        shell: bash
  - name: 'Debug: show installed LaTeX binaries'
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          which xelatex || echo "xelatex: not found"
          xelatex --version || true
          which pdflatex || echo "pdflatex: not found"
          pdflatex --version || true
          which latexmk || echo "latexmk: not found"
          latexmk --version || true
          echo "List /usr/bin for latex/pdflatex/xetex:" && ls -l /usr/bin/*tex* || true
        shell: bash
      - name: Generate paper figures (best-effort)
        run: |
          set -euo pipefail
          # Install any optional plotting extras (already done earlier, but safe)

          # Use a small number of steps so CI stays quick.
          python scripts/demo_runner.py --scenario examples/scenario_min.json --steps 5 --dt 1e-3 --seed 123 --timeline-budget 50

          # We run in best-effort mode; if this is too slow in CI you can add a --samples/--n-points arg to the script.
          if [ -f scripts/param_sweep_confinement.py ]; then
            # Request both dynamic ripple and time-containing CSV outputs (script writes to data/ by default)
            python scripts/param_sweep_confinement.py --full-sweep-with-dynamic-ripple --full-sweep-with-time
          # 3) Compute time-to-stability metrics (reads data/full_sweep_with_time.csv if present)
          if [ -f scripts/time_to_stability_yield.py ]; then

          # 4) Produce operating envelope JSON/CSV (envelope sweep script or param sweep may provide this)
          fi

          if [ -f scripts/run_report.py ]; then
            python scripts/run_report.py --feasibility feasibility_gates_report.json --timeline-summary timeline_summary.json --uq uq_optimized.json --integrated-out artifacts/integrated_report.json
            python scripts/production_kpi.py --feasibility feasibility_gates_report.json --metrics metrics.json --uq uq_optimized.json --out production_kpi.json
          fi

          # 6) Finally run the plotters (they will create small placeholders if inputs are absent)
          python scripts/plot_kpi_trend.py --out artifacts/kpi_trend.png
          python scripts/plot_envelope_dual_panel.py --envelope artifacts/operating_envelope.json --time-metrics artifacts/time_to_metrics.json --out artifacts/envelope_dual_panel.png
          # 7) Detect known tiny-placeholder PNGs. Fail only if a required PNG is missing, empty, or exactly matches the canonical 1x1 placeholder.
          PLACEHOLDER_HEX="89504E470D0A1A0A0000000D49484452000000010000000108060000001F15C4890000000A49444154789C6360000002000100FFFF03000006000557BF0000000049454E44AE426082"
          echo "Checking generated figures for placeholders (will fail if exact tiny-placeholder is detected)"
          for f in artifacts/dynamic_stability_ripple.png artifacts/envelope_dual_panel.png artifacts/kpi_trend.png artifacts/operating_envelope.png artifacts/time_to_metrics.png; do
              echo "Required figure missing: $f" >&2
              exit 2
            fi
            sz=$(stat -c%s "$f" || echo 0)
            echo "Found $f ($sz bytes)"
              echo "Figure $f is empty (0 bytes) — failing build" >&2
              exit 3
            fi
            # compute hex of file and check if it equals canonical placeholder
            fh=$(xxd -p -c 999999 "$f" | tr -d '\n' || true)
            if [ "$fh" = "$PLACEHOLDER_HEX" ]; then
              echo "Figure $f matches known tiny placeholder PNG — failing build" >&2
              xxd -l 64 "$f" >&2 || true
              exit 4
            echo "Preview (first 32 bytes hex) of $f: $(xxd -l 32 -p "$f" | tr -d '\n')"
          done
      - name: Save generated data/artifacts to cache
        with:
          path: |
            data
            artifacts
          key: ${{ runner.os }}-pv-data-${{ hashFiles('scripts/**','src/**','examples/**') }}
      - name: Build PDF with latexmk (choose engine)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          # Run latexmk directly so we get full stdout/stderr in the job log.
          # Prefer xelatex if available (some latexmk setups call xelatex by default),
          # otherwise fall back to pdflatex for a smaller texlive footprint.
name: Build Paper PDF

on:
  workflow_dispatch:
  push:
    paths:
      - 'papers/**'
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/**'

jobs:
  build-pdf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Restore cached data/artifacts (fast-path)
        uses: actions/cache@v3
        with:
          path: |
            data
            artifacts
          key: ${{ runner.os }}-pv-data-${{ hashFiles('scripts/**','src/**','examples/**') }}
          restore-keys: |
            ${{ runner.os }}-pv-data-
      - name: Set up Python and plotting dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-plot.txt ]; then pip install -r requirements-plot.txt || true; fi
        shell: bash
      - name: Install minimal TeX packages (Ubuntu runners)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          # These apt packages provide a reasonable LaTeX baseline including etoolbox
          sudo apt-get update -y
          # include xetex so xelatex is available (latexmk may call xelatex)
          # also install latexmk so we can run latexmk directly and capture logs
          sudo apt-get install -y --no-install-recommends texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended texlive-xetex latexmk
        shell: bash
      - name: Debug: show installed LaTeX binaries
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          echo "Which binaries are available and versions:"
          which xelatex || echo "xelatex: not found"
          xelatex --version || true
          which pdflatex || echo "pdflatex: not found"
          pdflatex --version || true
          which latexmk || echo "latexmk: not found"
          latexmk --version || true
          echo "List /usr/bin for latex/pdflatex/xetex:" && ls -l /usr/bin/*tex* || true
        shell: bash
      - name: Generate paper figures (best-effort)
        run: |
          set -euo pipefail
          mkdir -p artifacts data
          # Install any optional plotting extras (already done earlier, but safe)
          if [ -f requirements-plot.txt ]; then pip install -r requirements-plot.txt || true; fi
          # 1) Fast deterministic demo to generate timeline/feasibility artifacts used by run_report/production_kpi
          # Use a small number of steps so CI stays quick.
          python scripts/demo_runner.py --scenario examples/scenario_min.json --steps 5 --dt 1e-3 --seed 123 --timeline-budget 50
          # 2) Produce sweep CSVs (dynamic ripple / time sweeps). May be slow depending on script defaults.
          # We run in best-effort mode; if this is too slow in CI you can add a --samples/--n-points arg to the script.
          if [ -f scripts/param_sweep_confinement.py ]; then
            python scripts/param_sweep_confinement.py --full-sweep-with-dynamic-ripple --full-sweep-with-time
          fi
          # 3) Compute time-to-stability metrics (reads data/full_sweep_with_time.csv if present)
          if [ -f scripts/time_to_stability_yield.py ]; then
            python scripts/time_to_stability_yield.py --sweep-time data/full_sweep_with_time.csv --out-json artifacts/time_to_metrics.json --out-png artifacts/time_to_metrics.png
          fi
          # 4) Produce operating envelope JSON/CSV (envelope sweep script or param sweep may provide this)
          if [ -f scripts/envelope_sweep.py ]; then
            python scripts/envelope_sweep.py --n-points 12 --out-json artifacts/operating_envelope.json --out-csv data/operating_envelope.csv --out-png artifacts/operating_envelope.png
          fi
          # 5) Run the integrator and KPI summary (best-effort). Inputs may be missing; non-fatal.
          if [ -f scripts/run_report.py ]; then
            python scripts/run_report.py --feasibility feasibility_gates_report.json --timeline-summary timeline_summary.json --uq uq_optimized.json --integrated-out artifacts/integrated_report.json
          fi
          if [ -f scripts/production_kpi.py ]; then
            python scripts/production_kpi.py --feasibility feasibility_gates_report.json --metrics metrics.json --uq uq_optimized.json --out production_kpi.json
          fi
          # 6) Finally run the plotters (they will create small placeholders if inputs are absent)
          python scripts/plot_dynamic_stability_ripple.py --from-sweep data/full_sweep_with_dynamic_ripple.csv --out artifacts/dynamic_stability_ripple.png || true
          python scripts/plot_kpi_trend.py --out artifacts/kpi_trend.png || true
          python scripts/plot_envelope_dual_panel.py --envelope artifacts/operating_envelope.json --time-metrics artifacts/time_to_metrics.json --out artifacts/envelope_dual_panel.png || true
          # 7) Detect known tiny-placeholder PNGs. Fail only if a required PNG is missing, empty, or exactly matches the canonical 1x1 placeholder.
          PLACEHOLDER_HEX="89504E470D0A1A0A0000000D49484452000000010000000108060000001F15C4890000000A49444154789C6360000002000100FFFF03000006000557BF0000000049454E44AE426082"
          echo "Checking generated figures for placeholders (will fail if exact tiny-placeholder is detected)"
          for f in artifacts/dynamic_stability_ripple.png artifacts/envelope_dual_panel.png artifacts/kpi_trend.png artifacts/operating_envelope.png artifacts/time_to_metrics.png; do
            if [ ! -f "$f" ]; then
              echo "Required figure missing: $f" >&2
              exit 2
            fi
            sz=$(stat -c%s "$f" || echo 0)
            echo "Found $f ($sz bytes)"
            if [ "$sz" -eq 0 ]; then
              echo "Figure $f is empty (0 bytes) — failing build" >&2
              exit 3
            fi
            fh=$(xxd -p -c 999999 "$f" | tr -d '\n' || true)
            if [ "$fh" = "$PLACEHOLDER_HEX" ]; then
              echo "Figure $f matches known tiny placeholder PNG — failing build" >&2
              echo "First 64 bytes of $f:" >&2
              xxd -l 64 "$f" >&2 || true
              exit 4
            fi
            echo "Preview (first 32 bytes hex) of $f: $(xxd -l 32 -p "$f" | tr -d '\n')"
          done
        shell: bash
      - name: Save generated data/artifacts to cache
        uses: actions/cache@v3
        with:
          path: |
            data
            artifacts
          key: ${{ runner.os }}-pv-data-${{ hashFiles('scripts/**','src/**','examples/**') }}
      - name: Build PDF with latexmk (choose engine)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          # Run latexmk directly so we get full stdout/stderr in the job log.
          # Prefer xelatex if available (some latexmk setups call xelatex by default),
          # otherwise fall back to pdflatex for a smaller texlive footprint.
          echo "Building LaTeX PDF for papers/phase3_stability.tex"
          cd papers
          if command -v xelatex >/dev/null 2>&1; then
            latexmk -pdf -pdflatex=pdflatex -xelatex -quiet -f -interaction=nonstopmode -silent -halt-on-error -use-make phase3_stability.tex
          else
            latexmk -pdf -pdflatex=pdflatex -quiet -f -interaction=nonstopmode -silent -halt-on-error -use-make phase3_stability.tex
          fi
        shell: bash
          echo "Building LaTeX PDF for papers/phase3_stability.tex"
          cd papers
          if command -v xelatex >/dev/null 2>&1; then
            echo "Using xelatex via latexmk"
            latexmk -xelatex -interaction=nonstopmode -halt-on-error phase3_stability.tex || {
              echo "latexmk (xelatex) failed with exit $?: copying log files for diagnosis";
              ls -l || true;
              exit 1;
            }
          else
            echo "xelatex not found, falling back to pdflatex via latexmk"
            latexmk -pdf -interaction=nonstopmode -halt-on-error phase3_stability.tex || {
              echo "latexmk (pdflatex) failed with exit $?: copying log files for diagnosis";
              ls -l || true;
              exit 1;
            }
          fi
        shell: bash
      - name: Collect generated PDF and consolidate logs
        if: always()
        run: |
          set -euo pipefail
          mkdir -p papers
          # find and copy the PDF(s) to papers/
          find . -type f -iname 'phase3_stability.pdf' -print -exec cp -f {} papers/ \; || true
          # collect any .log files produced by LaTeX runs into a single build.log
          find . -type f -name '*.log' -print -exec cp -f {} papers/ \; || true
          if ls papers/*.log 1> /dev/null 2>&1; then
            cat papers/*.log > papers/build.log || true
          else
            echo "No .log files found" > papers/build.log
          fi
          ls -l papers || true
        shell: bash
      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: phase3_stability-pdf
          path: papers/phase3_stability.pdf
      - name: Upload LaTeX build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phase3_stability-build-log
          path: papers/build.log

  # zenodo-publish removed: publishing requires secrets and caused workflow validation failures
  # zenodo-publish removed (use scripts/publish_zenodo.sh locally or in a guarded CI job)

{"task":"Baseline anomaly injection tooling","status":"resolved","notes":"Synthetic generator landed and wired into dashboard; ready for sensitivity studies.","date":"2025-08-16","refs":["scripts/generate_timeline_anomalies.py","tests/test_followups.py"],"snippet":"# Generate anomalies ndjson (condensed)\n# python scripts/generate_timeline_anomalies.py --out docs/timeline_anomalies.ndjson --n 50 --severity mixed"}
{"title":"Unit coverage for EnergyLedger enhancement and reduction","status":"completed","refs":["tests/test_metrics_and_energy.py"],"notes":"Existing tests exercise ledger and FOM; enhancement path validated via manual run.","snippet":"from reactor.energy import EnergyLedger\nL=EnergyLedger(); L.add_power_sample(1000.0,1.0); L.apply_enhancement(4.2); L.set_yield(1e3); assert L.energy_per_antiproton()>0"}
{"title":"UQ: High-load stability under dynamic ripple","status":"completed","refs":["scripts/plot_dynamic_stability_ripple.py","tests/test_followups.py"],"notes":"Stability probability plotted from sweep and helper test ensures artifact creation.","snippet":"# From scripts/plot_dynamic_stability_ripple.py (condensed)\n# xs, ys = load_sweep('data/full_sweep_with_dynamic_ripple.csv');\n# plot_stability_ripple(xs, ys, 'artifacts/dynamic_stability_ripple.png')"}
{"title":"UQ: Economic FOM sensitivity (baseline setup)","status":"completed","refs":["configs/cost_model.json","scripts/production_kpi.py"],"notes":"KPI now honors cost model; full UQ sweep planned later.","snippet":"# production_kpi (condensed)\n# python scripts/production_kpi.py --cost-model configs/cost_model.json --timeline docs/timeline_anomalies.ndjson"}
{"title":"UQ: Hardware timeout reliability at 60s","status":"completed","refs":["src/reactor/core.py","tests/test_followups.py"],"notes":"Default timeout set to 60s and tests cover high-load timeout and error logging.","snippet":"from reactor.core import Reactor\nR=Reactor(); R.log_hardware_timeout_60s('high_load')"}
{"title":"UQ: Bennett ξ sensitivity smoke","status":"completed","refs":["scripts/param_sweep_confinement.py"],"notes":"Confinement estimator is monotone with ξ under low ripple in synthetic tests.","snippet":"import numpy as np\nfrom reactor.metrics import confinement_efficiency_estimator as CE\nxis=np.linspace(0.5,5.0,10); vals=[CE(x,1e-4) for x in xis]; print(np.median(vals))"}

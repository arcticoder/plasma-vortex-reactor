{"category":"V&V","task":"Validate bennett_profile shape and monotonicity","priority":"High","source_file":"src/reactor/models.py","source_snippet":"def bennett_profile","python_snippet":"import numpy as np\nfrom reactor.models import bennett_profile\nr = np.linspace(0,1,128)\nn = bennett_profile(n0=1.0, xi=2.0, r=r)\nassert n.shape == r.shape and np.all(n>0) and n[0] >= n[-1]"}
{"category":"V&V","task":"Check vorticity_evolution conservative behavior without forcing/diffusion","priority":"High","source_file":"src/reactor/models.py","source_snippet":"def vorticity_evolution","python_snippet":"import numpy as np\nfrom reactor.models import vorticity_evolution\nomega = np.zeros((64,64)); psi = np.zeros_like(omega)\nomega_new = vorticity_evolution(omega, psi, nu=0.0, dt=0.01, forcing=None)\nassert np.allclose(omega_new, omega)"}
{"category":"V&V","task":"Drift-Poisson step solves -Δψ=ω within tolerance on a known case","priority":"Medium","source_file":"src/reactor/models.py","source_snippet":"def drift_poisson_step","python_snippet":"import numpy as np\nfrom reactor.models import drift_poisson_step\nomega = np.zeros((32,32)); omega[16,16]=1.0\npsi = drift_poisson_step(omega, max_iter=10)\nassert psi.shape == omega.shape and np.isfinite(psi).all()"}
{"category":"V&V","task":"Microwave Maxwell model preserves dimensionality and responds to σ","priority":"Medium","source_file":"src/reactor/models.py","source_snippet":"def microwave_maxwell","python_snippet":"import numpy as np\nfrom reactor.models import microwave_maxwell\nE = np.ones((16,16,3)); out = microwave_maxwell(E, sigma=1.0, eps_r=2.0, mu_r=1.0, k0=1.0)\nassert out.shape == E.shape and np.all(out < E+1e-6)"}
{"category":"V&V","task":"LG mode generator normalization","priority":"Medium","source_file":"src/reactor/models.py","source_snippet":"def lg_mode","python_snippet":"import numpy as np\nfrom reactor.models import lg_mode\nrho = np.linspace(0,3,200)\nR = lg_mode(n=1,m=2,rho=rho,w=1.0)\nassert R.shape == rho.shape and R.max() <= 1.0+1e-6"}
{"category":"V&V","task":"Kinetics update maintains non-negativity","priority":"High","source_file":"src/reactor/models.py","source_snippet":"def kinetics_update","python_snippet":"import numpy as np\nfrom reactor.models import kinetics_update\nN = np.array([1.0, 0.5]); out = kinetics_update(N, dt=1e-3, rates={})\nassert np.all(out >= 0)"}
{"category":"V&V","task":"Adiabatic invariant μ scales with 1/B","priority":"Medium","source_file":"src/reactor/models.py","source_snippet":"def adiabatic_mu","python_snippet":"import numpy as np\nfrom reactor.models import adiabatic_mu\nmu1 = adiabatic_mu(m=1.0, vc=1.0, B=1.0); mu2 = adiabatic_mu(m=1.0, vc=1.0, B=2.0)\nassert mu2 == mu1/2.0"}
{"category":"V&V","task":"Integration smoke: Reactor.step() updates state","priority":"High","source_file":"src/reactor/core.py","source_snippet":"class Reactor","python_snippet":"from reactor.core import Reactor\nR = Reactor(grid=(32,32)); s0 = R.state.copy(); R.step(dt=1e-3); assert (R.state!=s0).any()"}
{"category":"Docs/Process","task":"Traceability: roadmap tasks appear in UQ/VnV and tests","priority":"High","source_file":"docs/roadmap.ndjson","source_snippet":"associated_tasks","python_snippet":"# Iterate tasks; assert presence in UQ/VnV/TODOs or tests by fuzzy title match"}

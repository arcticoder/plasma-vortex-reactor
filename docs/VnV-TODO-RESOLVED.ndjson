{"task":"Dashboard tolerance to malformed NDJSON","status":"resolved","notes":"Malformed lines skipped; resilience test added.","date":"2025-08-16","refs":["scripts/generate_timeline_anomalies.py","tests/test_followups.py"],"snippet":"# Read NDJSON and skip malformed lines (condensed)\n# pv-anomalies --out docs/timeline_anomalies.ndjson --n 50"}
{"title":"Gate supports optional yield check","status":"completed","refs":["scripts/metrics_gate.py"],"notes":"--require-yield flag adds antiproton_yield_pass requirement to feasibility gate.","snippet":"# metrics_gate.py (condensed)\n# python scripts/metrics_gate.py --require-yield --report feasibility_gates_report.json"}
{"category":"V&V","task":"Yield gate  1e8 cm^-3 s^-1 with physics-based estimator","priority":"High","source_file":"src/reactor/metrics.py","status":"completed","refs":["tests/test_metrics.py","tests/test_followups.py"],"snippet":"from reactor.metrics import antiproton_yield_estimator as Y\nassert Y(1e20,1e6,{\"sigma_pp\":1e-25,\"alpha_T\":0.5,\"k0\":1e-10})>=1e8"}
{"category":"V&V","task":"Plot stability vs ripple from sweep CSV","priority":"Medium","source_file":"scripts/plot_dynamic_stability_ripple.py","status":"completed","refs":["scripts/plot_dynamic_stability_ripple.py",".github/workflows/ci.yml"],"details":{"artifact":"dynamic_stability_ripple.png"},"snippet":"# CLI (condensed)\n# python scripts/plot_dynamic_stability_ripple.py --csv data/full_sweep_with_dynamic_ripple.csv --out artifacts/dynamic_stability_ripple.png"}
{"category":"V&V","task":"Schema sanity test using local JSON Schemas when present","priority":"Medium","status":"completed","refs":["tests/test_followups.py","docs/schemas/"],"snippet":"# Validate JSON using local schemas (condensed)\n# python scripts/run_report.py --validate --schemas docs/schemas"}
{"category":"V&V","task":"Hardware runner smoke test","priority":"Medium","status":"completed","refs":["tests/test_followups.py","scripts/hardware_runner.py"],"snippet":"# hardware_runner (condensed)\n# python scripts/hardware_runner.py --simulate --duration 0.1"}
{"category":"V&V","task":"High-load hardware metrics plot variant","priority":"Low","source_file":"scripts/plot_hardware_metrics.py","status":"completed","refs":["scripts/plot_hardware_metrics.py",".github/workflows/ci.yml"],"details":{"artifact":"high_load_hardware_metrics.png"},"snippet":"# CLI (condensed)\n# python scripts/plot_hardware_metrics.py --high-load --out artifacts/high_load_hardware_metrics.png"}
{"category":"V&V","task":"Time and dynamic ripple sweeps produce CSVs","priority":"Medium","source_file":"scripts/param_sweep_confinement.py","status":"completed","refs":["scripts/param_sweep_confinement.py",".github/workflows/ci.yml"],"details":{"csv":["full_sweep_with_time.csv","full_sweep_with_dynamic_ripple.csv"]},"snippet":"# Produce sweeps (condensed)\n# python scripts/param_sweep_confinement.py --full-sweep-with-time --out data/full_sweep_with_time.csv\n# python scripts/param_sweep_confinement.py --full-sweep-with-dynamic-ripple --out data/full_sweep_with_dynamic_ripple.csv"}
{"category":"V&V","task":"Gamma threshold duration check","status":"completed","refs":["tests/test_followups.py"],"notes":"Duration window logic exercised in synthetic timelines.","snippet":"from reactor.metrics import stability_duration\nimport numpy as np\ngamma = np.ones(10000)*150.0\nassert stability_duration(gamma, dt=1e-6, threshold=140.0, min_duration=1e-2)"}
